"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _debug = _interopRequireDefault(require("debug"));

require("axios-debug-log");

var _fs = _interopRequireDefault(require("fs"));

var _promises = _interopRequireDefault(require("fs/promises"));

var _path = _interopRequireDefault(require("path"));

var _cheerio = _interopRequireDefault(require("cheerio"));

var _PageLoaderNetError = _interopRequireDefault(require("./errors/PageLoaderNetError"));

var _PageLoaderFsError = _interopRequireDefault(require("./errors/PageLoaderFsError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debugHttpFiles = (0, _debug.default)('page-loader:http:files');
const debugHttpMain = (0, _debug.default)('page-loader:http:main');
const debugFs = (0, _debug.default)('page-loader:fs:');
const defaultDir = process.cwd();
const tags = ['img', 'link', 'script'];

const createFile = async (source, filepath) => {
  let response;

  try {
    debugHttpFiles('GET %s', source);

    const request = _axios.default.create({
      baseURL: source,
      method: 'GET',
      responseType: 'stream'
    });

    response = await request();
  } catch (e) {
    throw new _PageLoaderNetError.default(e, source);
  }

  try {
    await response.data.pipe(_fs.default.createWriteStream(filepath));
    return true;
  } catch (e) {
    throw new _PageLoaderFsError.default(e, filepath);
  }
};

const getAttrName = tag => {
  switch (tag) {
    case 'img':
      return 'src';

    case 'link':
      return 'href';

    case 'script':
      return 'src';

    default:
      throw new Error('Unknown tag name');
  }
};

const getName = url => {
  const nameFromHostName = `${url.hostname.split('.').join('-')}`;
  const nameFromPath = url.pathname.length > 1 ? `${url.pathname.split('/').join('-')}` : '';
  return `${nameFromHostName}${nameFromPath}`;
};

const getFilePath = (sourceUrl, baseUrl) => {
  const name = `${getName(baseUrl)}_files/${getName(sourceUrl)}`;
  const isSourceDirectory = _path.default.extname(sourceUrl.href) === '';
  return isSourceDirectory ? `${name}.html` : name;
};

const getSourcesInfo = (html, tagNames, baseUrl) => {
  const foundLinks = tagNames.reduce((acc, tag) => {
    const links = [];

    _cheerio.default.load(html)(tag).each((i, el) => {
      links[i] = {
        tag,
        origin: (0, _cheerio.default)(el).attr(getAttrName(tag))
      };
    });

    return [...acc, ...links];
  }, []);
  const linksForComparison = foundLinks.map(link => ({ ...link,
    normalized: new URL(link.origin, baseUrl)
  }));
  const localLinks = linksForComparison.filter(({
    normalized,
    origin
  }) => origin && normalized.host === baseUrl.host);
  return localLinks.map(item => ({ ...item,
    newFilePath: getFilePath(item.normalized, baseUrl)
  }));
};

const getNewHtml = (sourcesData, html) => {
  const $ = _cheerio.default.load(html);

  sourcesData.forEach(({
    tag,
    origin,
    newFilePath
  }) => {
    const attrName = getAttrName(tag);
    $(`${tag}[${attrName}="${origin}"]`).attr(attrName, newFilePath);
  });
  return $.html();
};

var _default = async (requestUrl, dir = defaultDir) => {
  const url = new URL(requestUrl);
  const pageName = getName(url);
  const filepath = `${dir}/${pageName}.html`;
  const filesDirName = `${dir}/${pageName}_files`;
  let html;
  let newHtml;
  let filesSource;

  try {
    debugHttpMain('GET %s', url.href);
    const {
      data
    } = await _axios.default.get(url.href);
    html = data;
  } catch (e) {
    throw new _PageLoaderNetError.default(e, url.href);
  }

  try {
    filesSource = getSourcesInfo(html, tags, url);
    newHtml = getNewHtml(filesSource, html);
  } catch (e) {
    throw new Error('Failed to parse loaded data. Write us, please');
  }

  try {
    await _promises.default.access(_path.default.dirname(dir));
    await _promises.default.mkdir(dir, {
      recursive: true
    });
  } catch (e) {
    throw new _PageLoaderFsError.default(e, _path.default.dirname(dir));
  }

  try {
    debugFs('Create file %s', filepath, dir);
    await _promises.default.writeFile(filepath, newHtml, 'utf-8');
  } catch (e) {
    throw new _PageLoaderFsError.default(e, dir);
  }

  try {
    debugFs('Create directory %s', filesDirName);
    await _promises.default.mkdir(filesDirName, {
      recursive: true
    });
  } catch (e) {
    throw new _PageLoaderFsError.default(e, dir);
  }

  filesSource.forEach(item => {
    createFile(item.normalized.href, `${dir}/${item.newFilePath}`);
  });
  return filepath;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,